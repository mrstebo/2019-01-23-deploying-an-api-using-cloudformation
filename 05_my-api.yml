Resources:
  QuestionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true

  PopulateQuestionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PopulateQuestions
      Handler: index.handler
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const ddb = new AWS.DynamoDB({ apiVersion: "2012-10-08" });
          const response = require("cfn-response");
          const uuid = require("uuid");

          const questions = [{
            title: "What is your preferred Cloud provider?",
            answers: [
              "Azure",
              "AWS",
              "GCP"
            ]
          }, {
            title: "What technologies do you use?",
            answers: [
              "Javascript",
              ".NET",
              "Go",
              "Ruby",
              "PHP"
            ]
          }];

          exports.handler = (event, context) => {
            console.log(JSON.stringify(event, null, 2));

            if (event.RequestType === "Create") {
              return ddb.batchWriteItem({
                RequestItems: {
                  [event.ResourceProperties.TableName]: questions.map(question => ({
                    PutRequest: {
                      Item: {
                        Id: { S: uuid.v4() },
                        Title: { S: question.title },
                        Answers: {
                          M: question.answers.reduce((r, v) => {
                            r[v] = { N: "0" };
                            return r;
                          }, {})
                        }
                      }
                    }
                  }))
                }
              }, err => {
                if (err) {
                  return response.send(event, context, response.FAILED, err);
                }
                return response.send(event, context, response.SUCCESS);
              });
            }

            return response.send(event, context, response.SUCCESS);
          };
      Runtime: nodejs8.10
      Role: !GetAtt PopulateQuestionsLambdaRole.Arn
      Timeout: 30

  PopulateQuestionsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow_access_to_dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt QuestionsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*

  PopulateQuestions:
    Type: Custom::PopulateQuestions
    Properties:
      ServiceToken: !GetAtt PopulateQuestionsLambda.Arn
      TableName: !Ref QuestionsTable

  GetQuestionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetQuestions
      Handler: index.handler
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const ddb = new AWS.DynamoDB({ apiVersion: "2012-10-08" });

          exports.handler = async (event, context) => {
            const result = await ddb.scan({
              TableName: process.env.TABLE_NAME,
              ProjectionExpression: "Id, Title, Answers"
            }).promise();

            return {
              statusCode: 200,
              body: JSON.stringify({
                data: result.Items.map(item => ({
                  id: item.Id.S,
                  title: item.Title.S,
                  answers: Object.keys(item.Answers.M).map(answer => ({
                    answer,
                    votes: parseInt(item.Answers.M[answer].N)
                  }))
                })),
                count: result.Count
              }),
              headers: {
                'Content-Type': 'application/json'
              }
            };
          };
      Runtime: nodejs8.10
      Role: !GetAtt GetQuestionsRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref QuestionsTable

  GetQuestionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow_reading_from_dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource:
                  - !GetAtt QuestionsTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  PostVoteLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PostVote
      Handler: index.handler
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const ddb = new AWS.DynamoDB({ apiVersion: "2012-10-08" });

          exports.handler = async (event, context) => {
            const questionId = event.pathParameters.question_id;
            const body = JSON.parse(event.body);

            await ddb.updateItem({
              TableName: process.env.TABLE_NAME,
              Key: {
                Id: { S: questionId }
              },
              UpdateExpression: "SET Answers.#s = Answers.#s + :val",
              ExpressionAttributeNames: {
                "#s": body.answer
              },
              ExpressionAttributeValues: {
                ":val": { N: "1" }
              }
            }).promise();

            return {
              statusCode: 204
            };
          };
      Runtime: nodejs8.10
      Role: !GetAtt PostVoteRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref QuestionsTable

  PostVoteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow_updating_dynamodb_item
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt QuestionsTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MyApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  MyApiLoggingAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt MyApiLoggingRole.Arn

  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: My API Gateway
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        swagger: '2.0'
        info:
          description: A simple voting API
          version: 1.0.0
          title: My Voting API
          contact:
            email: steve.atkinson@dootrix.com
        externalDocs:
          description: Github Repository
          url: 'https://github.com/mrstebo/2018-01-23-deploying-an-api-using-cloudformation'
        schemes:
          - https
        paths:
          '/questions':
            get:
              summary: Get a list of questions
              description: >
                Returns a list of available questions that can be voted on
              operationId: getQuestions
              produces:
                - application/json
              responses:
                '200':
                  description: Questions have been returned
                  schema:
                    $ref: '#/definitions/GetQuestionsSuccess'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_templates
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetQuestionsLambda.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                httpMethod: POST
                type: aws_proxy
          '/questions/{question_id}/votes':
            post:
              summary: Create a new vote for a question
              description: >
                Add a vote for a specific question
              operationId: postVote
              produces:
                - application/json
              parameters:
                - name: question_id
                  in: path
                  description: Question ID
                  required: true
                  type: string
                - name: answer
                  in: body
                  description: The selected answer
                  schema:
                    type: object
                    required:
                      - answer
                    properties:
                      answer:
                        type: string
              responses:
                '204':
                  description: The vote has been added
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_templates
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostVoteLambda.Arn}/invocations
                responses:
                  default:
                    statusCode: 204
                httpMethod: POST
                type: aws_proxy
        definitions:
          Empty:
            type: object
            title: Empty Schema
          GetQuestionsSuccess:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/QuestionItem'
          QuestionItem:
            type: object
            required:
              - id
              - title
              - answers
            properties:
              id:
                type: string
              title:
                type: string
              answers:
                type: array
                items:
                  $ref: '#/definitions/AnswerItem'
          AnswerItem:
            type: object
            required:
              - answer
              - votes
            properties:
              answer:
                type: string
              votes:
                type: number
                format: int32

  Default400XGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: DEFAULT_4XX
      ResponseTemplates:
        application/json: >
          {
            "message": "Invalid request"
          }

  Default500XGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: DEFAULT_5XX
      StatusCode: 503
      ResponseTemplates:
        application/json: >
          {
            "message": "Service is temporarily unavailable"
          }

  AccessDeniedGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: ACCESS_DENIED
      ResponseTemplates:
        application/json: >
          {
            "message": "You are not authorized to access this resource"
          }

  QuotaExceededGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: QUOTA_EXCEEDED
      ResponseTemplates:
        application/json: >
          {
            "message": "You have exceeded the number of API requests for your current plan"
          }

  ResourceNotFoundGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: RESOURCE_NOT_FOUND
      ResponseTemplates:
        application/json: >
          {
            "message": "Not found"
          }

  ThrottledGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: THROTTLED
      ResponseTemplates:
        application/json: >
          {
            "message": "Too many requests sent. Please wait before retrying."
          }

  UnauthorizedGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref MyApiGateway
      ResponseType: UNAUTHORIZED
      ResponseTemplates:
        application/json: >
          {
            "message": "You are not authorized to access this resource"
          }

  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApiGateway

  MyApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Sub ${AWS::StackName}-stage
      RestApiId: !Ref MyApiGateway
      DeploymentId: !Ref MyApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
          MetricsEnabled: true

  GetQuestionsInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: MyApiDeployment
    Properties:
      FunctionName: !Ref GetQuestionsLambda
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/${MyApiStage}/GET/questions
      Principal: apigateway.amazonaws.com

  PostVoteInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: MyApiDeployment
    Properties:
      FunctionName: !Ref PostVoteLambda
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/${MyApiStage}/POST/questions/*/votes
      Principal: apigateway.amazonaws.com
